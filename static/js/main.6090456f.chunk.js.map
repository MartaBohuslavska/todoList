{"version":3,"sources":["components/TodoForm.module.css","components/Todo.module.css","reportWebVitals.js","redux/todo-reducer.js","components/Todo.jsx","components/TodoForm.jsx","components/TodoFormContainer.jsx","App.js","redux/redux-store.js","index.js"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ADD_TODO","UPDATE_NEW_TODO","UPDATE_TODO","initialState","todoList","newTodoText","todoReducer","state","action","type","newTodo","todoText","id","length","newText","updateTodoText","updateText","Todo","editMode","todo","props","activeEditMode","setState","deActiveEditMode","updateTodo","handleChange","e","currentTarget","value","className","styles","todoElement","this","onDoubleClick","bind","onChange","autoFocus","onBlur","React","Component","TodoForm","console","log","todoListElements","map","item","newTodoElement","createRef","todo_list","addTodo","ref","text","current","updateNewTodo","required","onClick","TodoFormContainer","connect","todoListPage","dispatch","updateNewTodoActionCreator","updateTodoActionCreator","App","store","reducers","combineReducers","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6090456f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todo_list\":\"TodoForm_todo_list__FYeeE\",\"addTodo\":\"TodoForm_addTodo__2DS9Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoElement\":\"Todo_todoElement__3YI1E\",\"updateTodo\":\"Todo_updateTodo__1I0Mo\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const ADD_TODO = 'ADD_TODO';\r\nconst UPDATE_NEW_TODO = 'UPDATE_NEW_TODO';\r\nconst UPDATE_TODO = 'UPDATE_TODO';\r\n\r\nlet initialState = {\r\n    todoList: [],\r\n    newTodoText: 'add todo'\r\n};\r\n\r\nconst todoReducer = (state=initialState, action) => {\r\n    switch(action.type) {\r\n        case ADD_TODO: \r\n            let newTodo = {\r\n                todoText: state.newTodoText,\r\n                id: state.todoList.length\r\n            };\r\n           return {\r\n                ...state,\r\n                newTodoText: '',\r\n                todoList: [...state.todoList, newTodo]\r\n            }\r\n        case UPDATE_NEW_TODO: \r\n            return {\r\n                ...state,\r\n                newTodoText: action.newText\r\n            }\r\n        case UPDATE_TODO: \r\n            return {\r\n                ...state,\r\n                updateTodoText: action.updateText\r\n            }      \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addTodoActionCreator = () => ({\r\n    type: ADD_TODO\r\n});\r\nexport const updateNewTodoActionCreator = (text) => ({\r\n    type: UPDATE_NEW_TODO, \r\n    newText: text\r\n});\r\nexport const updateTodoActionCreator = (text) => ({\r\n    type: UPDATE_TODO, \r\n    updateText: text\r\n});\r\n\r\nexport default todoReducer;\r\n","import React from 'react';\r\nimport styles from './Todo.module.css';\r\n\r\nclass Todo extends React.Component  {\r\n    state = {\r\n        editMode: false,\r\n        todo: this.props.todo\r\n    }\r\n\r\n    activeEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deActiveEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n        this.props.updateTodo(this.state.todo)\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            todo: e.currentTarget.value\r\n        });\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className={styles.todoElement}>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <ul>\r\n                            <li onDoubleClick={this.activeEditMode.bind(this)}>\r\n                                {this.state.todo}\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input className={styles.updateTodo}\r\n                            onChange={this.handleChange} \r\n                            autoFocus={true} \r\n                            onBlur={this.deActiveEditMode.bind(this)} \r\n                            type=\"text\" \r\n                            value={this.state.todo}\r\n                        />\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todo;\r\n","import React from 'react';\r\nimport styles from './TodoForm.module.css';\r\nimport Todo from './Todo';\r\n\r\nconst TodoForm = (props) => {\r\n    console.log(props);\r\n    let todoListElements = props.todoList.map(item => \r\n        <Todo \r\n            todo={item.todoText} \r\n            key={item.id} \r\n            id={item.id} \r\n            updateTodo={props.updateTodo}\r\n        />);\r\n\r\n    let newTodoElement = React.createRef();\r\n\r\n    let addTodo = () => {\r\n            props.addTodo();\r\n    }\r\n\r\n    let handleChange = () => {\r\n        debugger\r\n        let text = newTodoElement.current.value;\r\n        props.updateNewTodo(text);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.todo_list}>\r\n            <h1 >To Do List</h1>\r\n            <div>\r\n                <input className={styles.addTodo}\r\n                    type=\"text\" \r\n                    ref={newTodoElement}\r\n                    value={props.newTodoText}\r\n                    onChange={handleChange}\r\n                    required\r\n                />\r\n                <button onClick={addTodo}>Add todo</button> \r\n            </div>\r\n            <div>{todoListElements}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TodoForm;\r\n","import { addTodoActionCreator, updateNewTodoActionCreator, updateTodoActionCreator } from '../redux/todo-reducer';\r\nimport { connect } from 'react-redux';\r\nimport TodoForm from './TodoForm';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todoList: state.todoListPage.todoList,\r\n        newTodoText: state.todoListPage.newTodoText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateNewTodo: (text) => { \r\n            dispatch(updateNewTodoActionCreator(text));\r\n        },\r\n        addTodo: () => {\r\n            dispatch(addTodoActionCreator());\r\n        },\r\n        updateTodo: (text) => { \r\n            dispatch(updateTodoActionCreator(text));\r\n        }\r\n    }\r\n}\r\n\r\nconst TodoFormContainer = connect(mapStateToProps, mapDispatchToProps)(TodoForm);\r\n\r\nexport default TodoFormContainer;\r\n","import './App.css';\nimport TodoFormContainer from './components/TodoFormContainer';\n\nconst App = (props) => {\n  return (\n    <div className=\"to-do-list\">\n      <TodoFormContainer store={props.store} dispatch={props.dispatch}/>\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers, createStore } from \"redux\";\r\nimport todoReducer from \"./todo-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    todoListPage: todoReducer,\r\n});\r\n\r\nlet store = createStore(reducers);\r\n\r\n\r\nwindow.store = store; \r\n\r\nexport default store;","import React from 'react';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider} from 'react-redux';\nimport store from './redux/redux-store';\n\nReactDOM.render(\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}